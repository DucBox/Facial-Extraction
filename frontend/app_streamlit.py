import sys
import os

# Th√™m th∆∞ m·ª•c g·ªëc c·ªßa project v√†o sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import streamlit as st
import numpy as np
import cv2
import tempfile
from PIL import Image
from src.detection import HeadDetector
from src.extraction import FaceFeatureExtractor
from src.config import LABELS

# Kh·ªüi t·∫°o model
detector = HeadDetector()
extractor = FaceFeatureExtractor()

st.title("üì∑ Facial Feature Extraction")

# T·∫°o uploader ƒë·ªÉ ch·ªçn ·∫£nh
uploaded_file = st.file_uploader("Ch·ªçn ·∫£nh ƒë·ªÉ ph√¢n t√≠ch", type=["jpg", "png", "jpeg"])

if uploaded_file:
    # Hi·ªÉn th·ªã ·∫£nh g·ªëc
    image = Image.open(uploaded_file)
    st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_column_width=True)

    # L∆∞u ·∫£nh v√†o file t·∫°m
    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_file:
        image.save(temp_file.name)
        temp_path = temp_file.name

    st.write("üîÑ ƒêang x·ª≠ l√Ω ·∫£nh, vui l√≤ng ƒë·ª£i...")

    # Ch·∫°y YOLO ƒë·ªÉ ph√°t hi·ªán ƒë·∫ßu ng∆∞·ªùi
    bboxes = detector.detect_heads(temp_path)

    if not bboxes:
        st.warning("‚ö† Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t n√†o trong ·∫£nh.")
    else:
        st.success(f"‚úÖ T√¨m th·∫•y {len(bboxes)} khu√¥n m·∫∑t!")

        # Chuy·ªÉn ·∫£nh PIL sang OpenCV format
        image_cv = cv2.imread(temp_path)

        for bbox in bboxes:
            st.write(f"üìç Ph√°t hi·ªán khu√¥n m·∫∑t t·∫°i: {bbox}")
            predictions = extractor.crop_and_classify(image_cv, bbox)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
            st.subheader("üìå K·∫øt qu·∫£ ph√¢n t√≠ch:")
            for label, prob in zip(LABELS, predictions[0]):
                if prob > 0.5:  # Ch·ªâ hi·ªÉn th·ªã nh√£n c√≥ x√°c su·∫•t cao
                    st.write(f"‚úî {label}: {prob:.4f}")

    st.success("‚úÖ X·ª≠ l√Ω ho√†n t·∫•t!")
